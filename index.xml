<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Yrieix Leprince</title><link>https://blog.yrieix.com/</link><description>Recent content on Yrieix Leprince</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 30 Jan 2023 12:54:48 +0000</lastBuildDate><atom:link href="https://blog.yrieix.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Scala Annotations</title><link>https://blog.yrieix.com/posts/scala-annotations/</link><pubDate>Mon, 30 Jan 2023 12:54:48 +0000</pubDate><guid>https://blog.yrieix.com/posts/scala-annotations/</guid><description>What are annotations in scala? Annotations in Scala are metadata tags applied to declarations or expressions, which can be used by the Scala compiler, or a third-party tool. They can provide additional information or instructions to the compiler, or customize the generated code.
Here are some common uses of annotations in Scala:
Compiler checks: @unchecked, @deprecated, @inline Type-checking: @tailrec, @specialized Generating boilerplate code: @scala.reflect.BeanProperty, @getter, @setter Frameworks/libraries: @Path, @RequestMapping, @SpringBootApplication, etc.</description><content:encoded><![CDATA[<h2 id="what-are-annotations-in-scala">What are annotations in scala?</h2>
<p>Annotations in Scala are metadata tags applied to declarations or expressions, which can be used by the Scala compiler, or a third-party tool.
They can provide additional information or instructions to the compiler, or customize the generated code.</p>
<p>Here are some common uses of annotations in Scala:</p>
<ol>
<li>Compiler checks: @unchecked, @deprecated, @inline</li>
<li>Type-checking: @tailrec, @specialized</li>
<li>Generating boilerplate code: @scala.reflect.BeanProperty, @getter, @setter</li>
<li>Frameworks/libraries: @Path, @RequestMapping, @SpringBootApplication, etc.</li>
</ol>
<p>Annotations in Scala are denoted by the &lsquo;@&rsquo; symbol, followed by the name of the annotation and optional arguments within parentheses.</p>
<p>For example the annotation @deprecated before a method causes the compiler to print a warning if the method is used.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">DeprecationDemo</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">App</span><span style="color:#66d9ef">:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">@deprecated</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#66d9ef">deprecation</span> <span style="color:#66d9ef">message</span><span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#f92672">,</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#66d9ef">release</span> <span style="color:#66d9ef">#</span> <span style="color:#66d9ef">which</span> <span style="color:#66d9ef">deprecates</span> <span style="color:#66d9ef">method</span><span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> hello <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;hola&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      hello
</span></span></code></pre></div><p>This will compile but the compiler will print a warning: ‚Äúthere was one deprecation warning‚Äù.</p>
<p>An annotation clause applies to the first definition or declaration following it. More than one annotation clause may precede a definition and declaration. The order in which these clauses are given does not matter.</p>
<h2 id="how-about-the-volatile-annotation">How about the <code>@volatile</code> annotation?</h2>
<p>The <code>@volatile</code> annotation in Scala is used to declare a field as volatile.
Volatile fields are special in that they can be read and written by multiple threads and provide visibility and ordering guarantees.
When a field is declared volatile, the JVM ensures that the latest value written to the field by one thread is visible to all other threads, and all changes to the volatile field are atomic.</p>
<p>Here&rsquo;s an example of how to declare a volatile field in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#a6e22e">@volatile</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> count <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><p>Note that @volatile is a Scala-specific annotation and is not a standard Java feature. The equivalent in Java would be to use the volatile keyword when declaring the field:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">volatile</span> <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span></code></pre></div><p>In general, volatile fields should be used sparingly and only in situations where visibility and atomicity guarantees are important, as access to volatile fields is slower than to non-volatile fields.</p>
<hr>
<p>sources:</p>
<ul>
<li><a href="https://docs.scala-lang.org/tour/annotations.html">scala doc</a></li>
<li><a href="">chat gpt</a></li>
</ul>
]]></content:encoded></item><item><title>Intro to Scala</title><link>https://blog.yrieix.com/posts/intro-to-scala/</link><pubDate>Sun, 25 Dec 2022 09:39:15 +0000</pubDate><guid>https://blog.yrieix.com/posts/intro-to-scala/</guid><description>Scala: A powerful language for building scalable applications.</description><content:encoded><![CDATA[<p>Scala is a modern, general-purpose programming language that runs on the Java Virtual Machine (JVM). It was first released in 2004 and has gained a lot of popularity among developers due to its concise, expressive syntax and support for both object-oriented and functional programming paradigms.</p>
<p>If you are new to Scala or are considering learning it, this blog post is for you! We&rsquo;ll start by giving you a brief overview of Scala and why it is a popular language, and then move on to the history and background of Scala. We&rsquo;ll also provide some tips on how to get started with Scala and where to go for further learning.</p>
<p>So, why is Scala such a hot language right now? Here are a few reasons:</p>
<ul>
<li>Scala has excellent support for concurrency and parallelism, making it a great choice for building high-performance, scalable systems.</li>
<li>Scala has a strong type system and a wealth of advanced type inference features, which can help you write safer and more maintainable code.</li>
<li>Scala is fully interoperable with Java, so you can use all of the Java libraries and tools you are familiar with in your Scala code.</li>
<li>Scala has an active and supportive community, with a wide range of libraries, frameworks, and tools available.
Whether you are an experienced developer looking to expand your skills or a beginner just starting out, Scala is definitely worth checking out. So let&rsquo;s dive in!</li>
</ul>
<h2 id="1--history-and-background-">1. üßê History and background üßê</h2>
<p>Scala was created by Martin Odersky and his team at the √âcole Polytechnique F√©d√©rale de Lausanne (EPFL) in Switzerland. The name Scala stands for &ldquo;Scalable Language&rdquo;, reflecting the language&rsquo;s design goal of being expressive and scalable.</p>
<p>Scala was first released in 2004, and it quickly gained traction due to its strong support for both object-oriented and functional programming. In addition to the core language features, Scala also includes a standard library and a set of tools and libraries for building web applications, data processing pipelines, and more.</p>
<p>One of the key design principles of Scala is that it is fully interoperable with Java. This means that you can use any Java library or tool in your Scala code, and you can also call Scala code from Java. This interoperability makes it easy for developers who are already familiar with Java to learn Scala, and it also means that you can leverage the vast ecosystem of Java libraries and tools when building Scala applications.</p>
<p>Another important feature of Scala is its strong type system. Scala has a rich set of built-in data types, as well as support for defining your own custom types. The type system in Scala is also statically-typed, which means that the types of variables and expressions are checked at compile-time rather than at runtime. This can help you catch errors earlier in the development process and make your code more reliable.</p>
<p>Overall, the combination of Java interoperability, support for both object-oriented and functional programming, and a strong type system make Scala a powerful and flexible language for building a wide range of applications.</p>
<h2 id="2--getting-started-with-scala-">2. üöÄ Getting started with Scala üöÄ</h2>
<p>Now that you have a bit of background on Scala, it&rsquo;s time to get started with the language! In this section, we&rsquo;ll walk you through the process of installing Scala on your machine, setting up a development environment, and running your first Scala program.</p>
<h3 id="21-installing-scala">2.1 Installing Scala</h3>
<p>To get started with Scala, you will first need to install the Scala software on your machine. There are a few different ways to do this, depending on your operating system and development setup.</p>
<ul>
<li><strong>Option 1: Install Scala using a package manager</strong>: If you are using a Unix-based system (e.g. Linux or macOS), you can use a package manager like apt, yum, or brew to install Scala. For example, on macOS you can use <code>brew install scala</code> to install the latest version of Scala.</li>
<li><strong>Option 2: Download Scala from the website</strong>: If you don&rsquo;t want to use a package manager, or if you are using Windows, you can download the Scala software directly from the Scala website (<a href="https://www.scala-lang.org/download/)">https://www.scala-lang.org/download/)</a>. Simply select your operating system and follow the instructions to download and install the Scala software.</li>
</ul>
<p>Once you have installed Scala, you should be able to run the scala command in your terminal to start the Scala interpreter. You can use the interpreter to execute Scala code interactively, which is a great way to get started with the language.</p>
<h3 id="22-setting-up-a-scala-development-environment">2.2 Setting up a Scala development environment</h3>
<p>While the Scala interpreter is useful for trying out small snippets of code, you will probably want a more full-featured development environment for building larger Scala projects. There are a few different options for setting up a Scala development environment, depending on your preferences and needs:</p>
<ul>
<li><strong>Option 1: Use an Integrated Development Environment (IDE)</strong>: If you prefer a full-featured, graphical development environment, you can use an IDE like IntelliJ IDEA or Eclipse with the Scala plugin installed. These IDEs provide features like syntax highlighting, code completion, and debugging support, which can make it easier to develop Scala projects.</li>
<li><strong>Option 2: Use a text editor and the command line</strong>: If you prefer a more lightweight development environment, you can use a text editor like Sublime Text or Atom, and run Scala code from the command line using the scalac compiler. This option may be more suitable for simple projects or for developers who are comfortable using the command line.</li>
</ul>
<h3 id="your-first-scala-program-hello-world">Your first Scala program: &ldquo;Hello, World!&rdquo;</h3>
<p>Now that you have Scala installed and a development environment set up, it&rsquo;s time to write your first Scala program! To keep things simple, we&rsquo;ll start with the classic &ldquo;Hello, World!&rdquo; program.</p>
<p>To write a Scala program, you will need to create a new file with a .scala extension and then type in the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">HelloWorld</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> main<span style="color:#f92672">(</span>args<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Array</span><span style="color:#f92672">[</span><span style="color:#66d9ef">String</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello, World!&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>This code defines an object called HelloWorld with a main method that takes an array of strings as an argument and returns Unit. The main method contains a single line of code that prints the string &ldquo;Hello, World!&rdquo; to the console.</p>
<p>To run this program, you can use the scala command followed by the name of the file containing the code. For example, if you have saved the code in a file called <em>hello.scala</em>, you can run it by typing <code>scala hello.scala</code> in the terminal.</p>
<p>You should see the output &ldquo;Hello, World!&rdquo; printed to the console. Congratulations, you have just written and run your first Scala program!</p>
<h2 id="3--scala-basics-">3. üêç Scala basics üêç</h2>
<p>Now that you have the basics of Scala set up, it&rsquo;s time to dive into the language itself. In this section, we&rsquo;ll cover some of the fundamental concepts of Scala, including data types, variables, and control structures.</p>
<h3 id="31-data-types-and-variables">3.1 Data types and variables</h3>
<p>Scala has a rich set of built-in data types, including numbers, characters, strings, and booleans. Here are a few examples of how you can declare variables of these types in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#75715e">// Numbers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> int<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> double<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.14</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Characters and strings
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> char<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Char</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;a&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> string<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello, World!&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Booleans
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> boolean<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Boolean</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>You can also use <strong>type inference</strong> to let the compiler determine the type of a variable based on the value it is assigned. For example, you can write the following code to declare variables of the same types as above:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#75715e">// Numbers
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> int <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> double <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">3.14</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Characters and strings
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> char <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#39;a&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> string <span style="color:#66d9ef">=</span> <span style="color:#e6db74">&#34;Hello, World!&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Booleans
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> boolean <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>In addition to the built-in data types, Scala also allows you to define your own custom data types using classes and case classes. We&rsquo;ll cover more about classes and case classes in the next section.</p>
<h3 id="32-control-structures">3.2 Control structures</h3>
<p>Scala provides a set of control structures for controlling the flow of your program. These include if statements, for loops, and while loops. Here are a few examples of how you can use these control structures in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#75715e">// If-else statements
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> x <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;x is positive&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;x is negative&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// For loops
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>i <span style="color:#66d9ef">&lt;-</span> <span style="color:#ae81ff">1</span> to <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  println<span style="color:#f92672">(</span>i<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// While loops
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> y <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>y <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  y <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  println<span style="color:#f92672">(</span>y<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>In addition to these control structures, Scala also provides a powerful pattern matching mechanism using match expressions. We&rsquo;ll cover more about pattern matching in the next section.</p>
<h3 id="33-functions-and-method-definitions">3.3 Functions and method definitions</h3>
<p>Scala allows you to define your own functions and methods to encapsulate and reuse code. To define a function in Scala, you can use the <code>def</code> keyword followed by the name of the function, its parameters, and its return type. Here is an example of how you can define a simple function in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> add<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  x <span style="color:#f92672">+</span> y
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>This function takes two <code>Int</code> arguments <code>x</code> and <code>y</code> and returns their sum as an <code>Int</code>. You can call this function by using its name followed by the arguments in parentheses, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> z <span style="color:#66d9ef">=</span> add<span style="color:#f92672">(</span><span style="color:#ae81ff">40</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span> <span style="color:#75715e">// z will be 42
</span></span></span></code></pre></div><p>You can also define methods, which are functions that are defined inside a <code>class</code> or <code>object</code>. To define a method, you can use the same syntax as for a function, but you will need to specify the name of the class or object in which the method is defined. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Calculator</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> add<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">+</span> y
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="4--object-oriented-programming-in-scala-">4. üè∞ Object-Oriented Programming in Scala üè∞</h2>
<p>In addition to its support for functional programming, Scala also provides a powerful set of tools for object-oriented programming. In this section, we&rsquo;ll cover the basics of classes and objects in Scala, as well as some advanced concepts like inheritance and polymorphism.</p>
<h3 id="41-classes-and-objects">4.1 Classes and objects</h3>
<p>In Scala, a class is a blueprint for creating objects. You can define a class by using the class keyword followed by the name of the class, its constructor parameters, and its body. Here is an example of how you can define a simple class in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">val</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> distanceToOrigin<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    math<span style="color:#f92672">.</span>sqrt<span style="color:#f92672">(</span>x <span style="color:#f92672">*</span> x <span style="color:#f92672">+</span> y <span style="color:#f92672">*</span> y<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>This class defines a Point with two <code>Double</code> fields, <code>x</code> and <code>y</code>, which are passed as constructor arguments. The class also defines a method <code>distanceToOrigin</code> that calculates the distance from the point to the origin <code>(0, 0)</code>.</p>
<p>To create an object from a class, you can use the new keyword followed by the name of the class and the arguments for the constructor. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> p <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3.0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4.0</span><span style="color:#f92672">)</span> <span style="color:#75715e">// p is a Point object with x = 3.0 and y = 4.0
</span></span></span></code></pre></div><p>You can access the fields of an object using the . operator, and you can call its methods using the same syntax as for functions. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> x <span style="color:#66d9ef">=</span> p<span style="color:#f92672">.</span>x <span style="color:#75715e">// x is 3.0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">val</span> d <span style="color:#66d9ef">=</span> p<span style="color:#f92672">.</span>distanceToOrigin<span style="color:#f92672">()</span> <span style="color:#75715e">// d is 5.0
</span></span></span></code></pre></div><p>In addition to defining classes and objects, Scala also provides a special kind of class called a <code>case class</code>, which is designed for use in pattern matching. We&rsquo;ll cover more about case classes in the next section.</p>
<h3 id="42-inheritance-and-polymorphism">4.2 Inheritance and polymorphism</h3>
<p>Scala allows you to define a class that extends another class, which is known as inheritance. The subclass (also called the child class) inherits the fields and methods of the superclass (also called the parent class), and can also define its own fields and methods. Here is an example of how you can define a subclass in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Shape</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> area<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0.0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Circle</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> radius<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Shape</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> area<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    math<span style="color:#f92672">.</span><span style="color:#a6e22e">Pi</span> <span style="color:#f92672">*</span> radius <span style="color:#f92672">*</span> radius
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>In this example, the <code>Shape</code> class defines a method area that returns <code>0.0</code>. The <code>Circle</code> class extends <code>Shape</code> and overrides the <code>area</code> method to provide a more accurate implementation for calculating the area of a circle.</p>
<p>In addition to inheritance, Scala also supports polymorphism, which allows you to write code that can work with multiple types in a uniform way. You can use polymorphism in Scala through inheritance, by defining a common interface for a group of related classes and then using the interface as the type for variables and methods. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">GeometricShape</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> area<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> perimeter<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Rectangle</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> width<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">val</span> height<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">GeometricShape</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> area<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    width <span style="color:#f92672">*</span> height
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> perimeter<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#f92672">(</span>width <span style="color:#f92672">+</span> height<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Triangle</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> a<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">val</span> b<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">val</span> c<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">GeometricShape</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> area<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">val</span> s <span style="color:#66d9ef">=</span> <span style="color:#f92672">(</span>a <span style="color:#f92672">+</span> b <span style="color:#f92672">+</span> c<span style="color:#f92672">)</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    math<span style="color:#f92672">.</span>sqrt<span style="color:#f92672">(</span>s <span style="color:#f92672">*</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">-</span> a<span style="color:#f92672">)</span> <span style="color:#f92672">*</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">-</span> b<span style="color:#f92672">)</span> <span style="color:#f92672">*</span> <span style="color:#f92672">(</span>s <span style="color:#f92672">-</span> c<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> perimeter<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    a <span style="color:#f92672">+</span> b <span style="color:#f92672">+</span> c
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> shapes<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">GeometricShape</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Rectangle</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2.0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3.0</span><span style="color:#f92672">),</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Triangle</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3.0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4.0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">5.0</span><span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>shape <span style="color:#66d9ef">&lt;-</span> shapes<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  println<span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;Area: </span><span style="color:#e6db74">${</span>shape<span style="color:#f92672">.</span>area<span style="color:#f92672">()</span><span style="color:#e6db74">}</span><span style="color:#e6db74">, Perimeter: </span><span style="color:#e6db74">${</span>shape<span style="color:#f92672">.</span>perimeter<span style="color:#f92672">()</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>In this example, the <code>GeometricShape</code> trait defines an interface for geometric shapes with area and perimeter methods. The <code>Rectangle</code> and <code>Triangle</code> classes both extend <code>GeometricShape</code> and provide concrete implementations for these methods.</p>
<p>The <code>shapes</code> variable is defined as a list of <code>GeometricShape</code> objects, and contains a <code>Rectangle</code> and a <code>Triangle</code>. The <code>for</code> loop iterates over the shapes list and prints the area and perimeter of each shape. Because both the <code>Rectangle</code> and <code>Triangle</code> classes extend <code>GeometricShape</code> and implement the area and perimeter methods, the loop is able to work with both types in a uniform way.</p>
<p>In this way, inheritance and polymorphism allow you to write reusable and flexible code in Scala.</p>
<h3 id="case-classes-and-pattern-matching-">Case classes and pattern matching üíº</h3>
<p>Scala provides a special kind of class called a <code>case class</code>, which is designed for use in pattern matching. A case class is a class with a few additional features:</p>
<ul>
<li>it has a default <code>apply</code> method,</li>
<li>it has default <code>toString</code>, <code>equals</code>, and <code>hashCode</code> implementations,</li>
<li>it can be deconstructed using pattern matching.</li>
</ul>
<p>Case classes are often used in conjunction with pattern matching to make it easier to work with complex data structures. Pattern matching is a powerful tool in Scala that allows you to match an expression against a set of patterns and execute different code depending on which pattern matches.</p>
<p>Here is an example of how you can use case classes and pattern matching in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">,</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> p <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3.0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4.0</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> y<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> println<span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;x = </span><span style="color:#e6db74">$x</span><span style="color:#e6db74">, y = </span><span style="color:#e6db74">$y</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Not a Point&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>In this example, the Point case class defines a Point with two <code>Double</code> fields, <code>x</code> and <code>y</code>. The <code>p</code> variable is a <code>Point</code> object with <code>x</code> equal to <code>3.0</code> and <code>y</code> equal to <code>4.0</code>.</p>
<p>The match expression compares the value of <code>p</code> against a set of patterns. In this case, the first pattern <code>Point(x, y)</code> matches the value of <code>p</code>, so the code inside the block is executed. This prints <code>x = 3.0, y = 4.0</code> to the console.</p>
<p>If none of the patterns match, the default case <code>_</code> is used. In this example, the default case is not used because the <code>Point</code> pattern matches the value of <code>p</code>.</p>
<p>Case classes and pattern matching are powerful tools in Scala that allow you to work with complex data structures in a concise and expressive way.</p>
<h2 id="5--functional-programming-in-scala-">5. üåÄ Functional Programming in Scala üåÄ</h2>
<p>In addition to its support for object-oriented programming, Scala is also a functional programming language, which means it provides a set of tools and concepts for writing code in a functional style. In this section, we&rsquo;ll cover some of the key features of functional programming in Scala, including higher-order functions, immutability, and lazy evaluation.</p>
<h3 id="51-higher-order-functions">5.1 Higher-order functions</h3>
<p>In Scala, a higher-order function is a function that takes another function as an argument or returns a function as a result. Higher-order functions are a key feature of functional programming because they allow you to abstract over functions and manipulate them in a flexible way.</p>
<p>Here is an example of how you can define a higher-order function in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> applyTwice<span style="color:#f92672">(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Double</span><span style="color:#f92672">,</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  f<span style="color:#f92672">(</span>f<span style="color:#f92672">(</span>x<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> square<span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  x <span style="color:#f92672">*</span> x
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> y <span style="color:#66d9ef">=</span> applyTwice<span style="color:#f92672">(</span>square<span style="color:#f92672">,</span> <span style="color:#ae81ff">3.0</span><span style="color:#f92672">)</span> <span style="color:#75715e">// y is 81.0
</span></span></span></code></pre></div><p>In this example, the <code>applyTwice</code> function takes a function <code>f</code> and an argument <code>x</code> and applies the function twice to the argument. The <code>square</code> function is a simple function that takes a <code>Double</code> and returns its square.</p>
<p>You can call the <code>applyTwice</code> function by passing the <code>square</code> function as the first argument and a value for <code>x</code>. In this case, the <code>applyTwice</code> function applies the square function to <code>3.0</code> and then applies it again to the result, which is <code>9.0</code>. This means the final value of <code>y</code> is <code>81.0</code>.</p>
<p>Higher-order functions are a powerful feature of functional programming because they allow you to write reusable and flexible code that can work with different functions in a uniform way.</p>
<h3 id="52-immutability">5.2 Immutability</h3>
<p>In functional programming, immutability is the concept that once an object is created, it cannot be modified. This means that you cannot change the fields of an object or add or remove elements from a collection. Instead, you have to create a new object with the desired changes.</p>
<p>Immutability has several benefits, including making it easier to reason about your code and reducing the risk of race conditions and other concurrency issues.</p>
<p>In Scala, you can define an immutable object by using the <code>val</code> keyword to define its fields. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">val</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Double</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> p <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3.0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4.0</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>In this example, the <code>Point</code> class has two <code>Double</code> fields, x and y, which are defined as <code>val</code> fields. This means that once the <code>p</code> object is created, you cannot change the values of <code>x</code> and <code>y</code>.</p>
<p>You can, however, create a new <code>Point</code> object with different values for <code>x</code> and <code>y</code>. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> q <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#ae81ff">5.0</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">6.0</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>This creates a new Point object with <code>x</code> equal to <code>5.0</code> and <code>y</code> equal to <code>6.0</code>. The original <code>p</code> object is not modified and remains unchanged.</p>
<p>Immutability is a key concept in functional programming because it allows you to write code that is easier to reason about and less prone to concurrency issues.</p>
<h3 id="53-lazy-evaluation">5.3 Lazy evaluation</h3>
<p>In Scala, you can define a value that is evaluated lazily, which means it is not evaluated until it is needed. Lazy evaluation is a useful feature of functional programming because it allows you to define values that may be expensive to compute, but only compute them when they are actually needed.</p>
<p>You can define a lazy value in Scala using the <code>lazy val</code> keyword. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">lazy</span> <span style="color:#66d9ef">val</span> x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Evaluating x&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Accessing x&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>println<span style="color:#f92672">(</span>x<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>In this example, the <code>x</code> value is defined as a <code>lazy</code> value using the <code>lazy val</code> keyword. When the <code>x</code> value is accessed for the first time, the code inside the block is executed and the value is computed. In this case, the code prints &ldquo;Evaluating x&rdquo; and then returns 42.</p>
<p>Lazy evaluation is a useful feature of functional programming because it allows you to define values that may be expensive to compute, but only compute them when they are actually needed. This can improve the performance of your code by avoiding unnecessary computations.</p>
<h3 id="54-working-with-collections-using-higher-order-functions-">5.4 Working with collections using higher-order functions üì¶</h3>
<p>Scala&rsquo;s collections library provides a rich set of higher-order functions that allow you to work with collections in a functional style. In this section, we&rsquo;ll cover some of the key features of Scala&rsquo;s collections library, including <code>map</code>, <code>filter</code>, and <code>reduce</code>.</p>
<p><strong><code>map</code></strong>
The <code>map</code> function is a higher-order function that takes a function and a collection, applies the function to each element of the collection, and returns a new collection with the transformed elements.</p>
<p>Here is an example of how you can use the map function in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> numbers<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> squaredNumbers <span style="color:#66d9ef">=</span> numbers<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=&gt;</span> x <span style="color:#f92672">*</span> x<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>println<span style="color:#f92672">(</span>squaredNumbers<span style="color:#f92672">)</span> <span style="color:#75715e">// prints List(1, 4, 9, 16, 25)
</span></span></span></code></pre></div><p>In this example, the <code>numbers</code> variable is a list of integers, and the <code>squaredNumbers</code> variable is a new list that is created by applying the function <code>x =&gt; x * x</code> to each element of the numbers list. This function takes an integer x and returns its square.</p>
<p>The <code>map</code> function is a useful tool for transforming collections in a functional style.</p>
<p><strong><code>filter</code></strong></p>
<p>The filter function is a higher-order function that takes a predicate function and a collection, and returns a new collection with the elements that satisfy the predicate. A predicate is a function that takes an element and returns a boolean value indicating whether the element satisfies a certain condition.</p>
<p>Here is an example of how you can use the filter function in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> numbers<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> evenNumbers <span style="color:#66d9ef">=</span> numbers<span style="color:#f92672">.</span>filter<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=&gt;</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> numbers<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> evenNumbers <span style="color:#66d9ef">=</span> numbers<span style="color:#f92672">.</span>filter<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=&gt;</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>println<span style="color:#f92672">(</span>evenNumbers<span style="color:#f92672">)</span> <span style="color:#75715e">// prints List(2, 4)
</span></span></span></code></pre></div><p>In this example, the <code>numbers</code> variable is a list of integers, and the <code>evenNumbers</code> variable is a new list that is created by filtering the numbers list using the predicate function <code>x =&gt; x % 2 == 0</code>. This function takes an integer <code>x</code> and returns <code>true</code> if x is even and false if <code>x</code> is odd.</p>
<p>The <code>filter</code> function is a useful tool for selecting elements from a collection in a functional style.</p>
<p><strong><code>reduce</code></strong></p>
<p>The reduce function is a higher-order function that takes a binary function and a collection, and applies the function to the elements of the collection in a cumulative way, starting from the leftmost element. The reduce function returns a single value that is the result of the cumulative application of the function.</p>
<p>Here is an example of how you can use the reduce function in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> numbers<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> sum <span style="color:#66d9ef">=</span> numbers<span style="color:#f92672">.</span>reduce<span style="color:#f92672">((</span>x<span style="color:#f92672">,</span> y<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> x <span style="color:#f92672">+</span> y<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>println<span style="color:#f92672">(</span>sum<span style="color:#f92672">)</span> <span style="color:#75715e">// prints 15
</span></span></span></code></pre></div><p>In this example, the <code>numbers</code> variable is a list of integers, and the sum variable is the result of applying the binary function <code>(x, y) =&gt; x + y</code> to the elements of the numbers list in a cumulative way. This function takes two integers <code>x</code> and <code>y</code> and returns their sum.</p>
<p>The <code>reduce</code> function is a useful tool for combining the elements of a collection in a functional style.</p>
<p>Scala&rsquo;s collections library provides a rich set of higher-order functions that allow you to work with collections in a functional style. These functions, along with other features of functional programming such as immutability and lazy evaluation, make Scala a powerful and expressive language for writing functional code.</p>
<h2 id="6--advanced-scala-features-">6. üåà Advanced Scala features üåà</h2>
<p>Scala is a rich and powerful language that provides a wide range of advanced features for building complex and scalable applications. In this section, we&rsquo;ll cover some of the key features of Scala that set it apart from other languages, including its type system, traits, and the actor model.</p>
<h3 id="61-type-system">6.1 Type System</h3>
<p>Scala has a powerful type system that supports advanced features such as type inference, variance annotations, and higher-kinded types.</p>
<p>Type inference is a feature of Scala&rsquo;s type system that allows the compiler to automatically deduce the types of variables and expressions based on the context in which they are used. This means you don&rsquo;t always have to explicitly specify the types of your variables and expressions, which can make your code more concise and readable.</p>
<p>Variance annotations allow you to control the way in which types are related to each other. For example, you can use variance annotations to specify whether a type is covariant, contravariant, or invariant in its type parameters.</p>
<p>Higher-kinded types are a feature of Scala&rsquo;s type system that allow you to abstract over type constructors, which are types that take other types as parameters. For example, the <code>List</code> type is a type constructor that takes a single type parameter and produces a concrete type, such as <code>List[Int]</code> or <code>List[String]</code>. Higher-kinded types allow you to write generic code that works with a wide range of type constructors, not just concrete types.</p>
<p>Here is an example of how you can use higher-kinded types in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Functor</span><span style="color:#f92672">[</span><span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">_</span><span style="color:#f92672">]]</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> map<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">])(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">val</span> listFunctor<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Functor</span><span style="color:#f92672">[</span><span style="color:#66d9ef">List</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Functor</span><span style="color:#f92672">[</span><span style="color:#66d9ef">List</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> map<span style="color:#f92672">[</span><span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">])(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">List</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> fa<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>f<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> map<span style="color:#f92672">[</span><span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">_</span><span style="color:#f92672">]</span>, <span style="color:#66d9ef">A</span>, <span style="color:#66d9ef">B</span><span style="color:#f92672">](</span>fa<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">A</span><span style="color:#f92672">])(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">A</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)(</span><span style="color:#66d9ef">implicit</span> F<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Functor</span><span style="color:#f92672">[</span><span style="color:#66d9ef">F</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">F</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> F<span style="color:#f92672">.</span>map<span style="color:#f92672">(</span>fa<span style="color:#f92672">)(</span>f<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>In this example, the <code>Functor</code> trait is a higher-kinded type that takes a type constructor <code>F</code> as a type parameter. The <code>Functor</code> trait defines a <code>map</code> method that takes a value of type <code>F[A]</code> and a function <code>A =&gt; B</code> and returns a value of type <code>F[B]</code>.</p>
<p>The <code>listFunctor</code> value is an instance of the <code>Functor</code> trait for the <code>List</code> type constructor. It provides a concrete implementation of the <code>map</code> method for <code>List</code> values.</p>
<p>The <code>map</code> function is a generic function that takes a value of type <code>F[A]</code>, a function <code>A =&gt; B</code>, and an implicit instance of the <code>Functor</code> trait for <code>F</code>. It uses the <code>map</code> method of the implicit <code>Functor</code> instance to apply the function <code>f</code> to the value <code>fa</code>.</p>
<p>This example shows how higher-kinded types can be used to define abstractions that work with a wide range of type constructors and provide a uniform interface for working with them.</p>
<h3 id="62-traits">6.2 Traits</h3>
<p>In Scala, a trait is a language construct that allows you to define reusable pieces of behavior that can be mixed into classes. A trait can define methods, fields, and types, and can be extended by one or more classes or traits.</p>
<p>Here is an example of how you can use traits in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> makeNoise<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> makeNoise<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Woof!&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> makeNoise<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Meow!&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> dog <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Dog</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> cat <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Cat</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>println<span style="color:#f92672">(</span>dog<span style="color:#f92672">.</span>makeNoise<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Woof!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>println<span style="color:#f92672">(</span>cat<span style="color:#f92672">.</span>makeNoise<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Meow!&#34;
</span></span></span></code></pre></div><p>In this example, the Animal trait defines a single method makeNoise that takes no arguments and returns a String. The Dog and Cat classes extend the Animal trait and provide concrete implementations of the makeNoise method.</p>
<p>When the makeNoise method is called on a Dog or Cat instance, the appropriate implementation of the method is used. This allows you to reuse the Animal trait&rsquo;s behavior in multiple classes and customize it as needed.</p>
<p>You can also mix multiple traits into a single class using the with keyword. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Flyable</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> fly<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Swimmable</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> swim<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Duck</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Flyable</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Swimmable</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> makeNoise<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Quack!&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> fly<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Flap flap!&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> swim<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Splash splash!&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> duck <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Duck</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>println<span style="color:#f92672">(</span>duck<span style="color:#f92672">.</span>makeNoise<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Quack!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>println<span style="color:#f92672">(</span>duck<span style="color:#f92672">.</span>fly<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Flap flap!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>println<span style="color:#f92672">(</span>duck<span style="color:#f92672">.</span>swim<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Splash splash!&#34;
</span></span></span></code></pre></div><p>In this example, the Duck class extends the Animal trait and mixes in the Flyable and Swimmable traits. This allows the Duck class to reuse the behavior defined in these traits and customize it as needed.</p>
<p>Traits are a powerful and flexible tool for defining and reusing behavior in Scala. You can also use trait inheritance and composition to define more complex behavior in Scala. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">WingedAnimal</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> fly<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Bat</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">WingedAnimal</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> makeNoise<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Squeak!&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> fly<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Flap flap!&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Butterfly</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">Flyable</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> makeNoise<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Flutter!&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> fly<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Flap flap!&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> bat <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Bat</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> butterfly <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Butterfly</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>println<span style="color:#f92672">(</span>bat<span style="color:#f92672">.</span>makeNoise<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Squeak!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>println<span style="color:#f92672">(</span>bat<span style="color:#f92672">.</span>fly<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Flap flap!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>println<span style="color:#f92672">(</span>butterfly<span style="color:#f92672">.</span>makeNoise<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Flutter!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>println<span style="color:#f92672">(</span>butterfly<span style="color:#f92672">.</span>fly<span style="color:#f92672">())</span> <span style="color:#75715e">// prints &#34;Flap flap!&#34;
</span></span></span></code></pre></div><p>In this example, the WingedAnimal trait extends the Animal trait and adds a new method fly. The Bat class extends the WingedAnimal trait and provides a concrete implementation of the makeNoise and fly methods.</p>
<p>The Butterfly class extends the Animal trait and mixes in the Flyable trait. It provides a concrete implementation of the makeNoise and fly methods.</p>
<p>This example shows how you can use trait inheritance and composition to define complex behavior in Scala.</p>
<h3 id="63-actor-model">6.3 Actor Model</h3>
<p>The actor model is a programming model for concurrent and distributed systems that is based on the idea of actors as autonomous entities that communicate with each other through asynchronous message passing.</p>
<p>Scala provides support for the actor model through the akka library, which provides a high-level API for building actor-based systems.</p>
<p>Here is an example of how you can use the actor model in Scala:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> akka.actor.Actor
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> akka.actor.ActorSystem
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> akka.actor.Props
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Message</span><span style="color:#f92672">(</span>text<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">String</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">EchoActor</span> <span style="color:#66d9ef">extends</span> actor <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> receive <span style="color:#66d9ef">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Message</span><span style="color:#f92672">(</span>text<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> sender <span style="color:#f92672">!</span> text
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> system <span style="color:#66d9ef">=</span> actorSystem<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;MyActorSystem&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> actor <span style="color:#66d9ef">=</span> system<span style="color:#f92672">.</span>actorOf<span style="color:#f92672">(</span><span style="color:#a6e22e">Props</span><span style="color:#f92672">[</span><span style="color:#66d9ef">EchoActor</span><span style="color:#f92672">],</span> <span style="color:#e6db74">&#34;echoActor&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>actor <span style="color:#f92672">!</span> <span style="color:#a6e22e">Message</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello, world!&#34;</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>In this example, the <code>EchoActor</code> class extends the <code>Actor</code> trait and defines a receive method that handles incoming messages. When the actor receives a <code>Message</code> object, it sends the message&rsquo;s text field back to the sender.</p>
<p>The <code>actorSystem</code> and <code>actorOf</code> methods are used to create an actor system and an actor within that system. The actor system is the top-level container for actors, and it manages the actors&rsquo; lifecycles and dispatches messages between them.</p>
<p>The <code>!</code> operator is used to send a message to an actor. In this example, the <code>Message(&quot;Hello, world!&quot;)</code> message is sent to the <code>actor</code> instance, and the <code>EchoActor</code> responds by sending the message text back to the sender.</p>
<p>The actor model provides a number of benefits for concurrent and distributed systems, including:</p>
<ul>
<li><strong>Simplified concurrent programming</strong>: Actors provide a clear and simple model for concurrent programming, as they are isolated entities that communicate through message passing. This can make it easier to reason about concurrent programs and avoid common pitfalls</li>
<li><strong>Enhanced concurrency</strong>: Actors are lightweight and can be created and destroyed dynamically, which makes it easy to scale up and down the number of concurrent tasks as needed. This can lead to better utilization of resources and improved concurrency compared to other concurrent programming models.</li>
<li><strong>Location transparency</strong>: Actors can be located on different nodes in a distributed system, and the actor model provides a uniform interface for interacting with them regardless of their location. This can make it easier to build distributed systems that are resilient to failures and can scale horizontally.</li>
</ul>
<p>The actor model is a powerful tool for building concurrent and distributed systems in Scala, and it is widely used in a variety of applications.</p>
<h2 id="-conclusion-">üèÅ Conclusion üèÅ</h2>
<p>In this article, we&rsquo;ve provided a high-level introduction to Scala, a modern and powerful programming language that is well-suited for building complex and scalable applications. We&rsquo;ve covered the key features of Scala, including its syntax, functional programming support, and advanced features such as the type system, traits, and the actor model.</p>
<p>We hope this article has given you a good overview of what Scala is and what it can do, and that it has inspired you to learn more about this exciting and versatile language.</p>
<p>Scala is a powerful language that offers a wide range of features for building complex and scalable applications. Whether you&rsquo;re new to programming or an experienced developer, Scala has something to offer. We encourage you to learn more about Scala and start exploring all that it has to offer.</p>
<p>To go further:</p>
<ul>
<li>The official Scala <a href="https://www.scala-lang.org/">website</a> is a good starting point for learning about Scala. It provides a wealth of information about the language, including documentation, tutorials, and examples.</li>
<li>The &ldquo;Programming in Scala&rdquo; book by Martin Odersky, Lex Spoon, and Bill Venners is a comprehensive and well-written guide to Scala. It covers the language in depth and is suitable for both beginners and experienced programmers.</li>
<li>The <a href="https://docs.scala-lang.org/">Scala documentation</a> provides detailed information about the language, including its syntax, standard library, and advanced features.</li>
<li>The <a href="https://www.scala-exercises.org/">Scala Exercises website</a> provides a series of interactive exercises that help you learn Scala by solving problems and writing code.</li>
<li>The <a href="https://www.scala-koans.org/">Scala Koans</a> are a series of exercises that teach you Scala by presenting a series of tests that you must make pass.</li>
<li>The <a href="https://twitter.github.io/scala_school/">Scala School</a> is a collection of tutorials and lectures that cover a wide range of Scala topics.</li>
<li>The <a href="https://scala-community.org/">Scala community</a> is a great resource for getting help and staying up-to-date on the latest developments in the Scala world. There are many forums, mailing lists, and social media groups where you can connect with other Scala developers and learn from their experiences.</li>
</ul>
]]></content:encoded></item><item><title>Get Started Blogging</title><link>https://blog.yrieix.com/posts/how-to-start-a-blog/</link><pubDate>Sat, 24 Dec 2022 00:22:47 +0000</pubDate><guid>https://blog.yrieix.com/posts/how-to-start-a-blog/</guid><description>A Step-by-Step Guide to Setting Up Your Own Blog</description><content:encoded><![CDATA[<p>Are you thinking about starting a blog? Whether you want to share your thoughts, ideas, or experiences with a wider audience, blogging can be a fun and rewarding way to express yourself and connect with others. In this article, we will walk you through the steps of starting a blog, from choosing a platform to writing and publishing content. We&rsquo;ll also provide some helpful resources and tips to get you started and on your way to building a successful blog. So, if you&rsquo;re ready to start sharing your voice with the world, let&rsquo;s get started!</p>
<hr>
<p><strong>TL;DR</strong></p>
<ol>
<li>üíª <strong>Choosing a blogging plateform</strong>: There are many options for blogging platforms, such as WordPress, Blogger, and Squarespace. Each platform has its own features and benefits, so you should choose one that meets your needs and budget.</li>
<li>üåç <strong>Selecting a domain name</strong>: Your domain name is the web address that people will use to access your blog. Choose a domain name that is memorable, easy to spell, and relevant to your blog&rsquo;s content.</li>
<li>üè† <strong>Setting up hosting</strong>: Your blog will need a place to live on the internet, which is called hosting. You can choose a hosting provider that offers plans specifically for blogging platforms, such as WordPress hosting.</li>
<li>üé® <strong>Designing your blog</strong>: Use the tools and features provided by your blogging platform to customize the appearance and layout of your blog. Choose a theme, add widgets and plug-ins, and create pages and menus.</li>
<li>üìù <strong>Writing and publishing content</strong>: Once your blog is set up, you can start publishing posts and pages. Choose a schedule that works for you and</li>
</ol>
<hr>
<h2 id="1--choosing-a-blogging-plateform">1. üíª Choosing a blogging plateform</h2>
<p>One of the first steps in starting a blog is choosing a blogging platform. There are many options available, each with its own unique features and benefits. Some popular blogging platforms include WordPress, Blogger, and Squarespace.</p>
<ul>
<li>
<p><a href="https://wordpress.org/">WordPress.org</a> is a powerful and flexible platform that is widely used by bloggers around the world. It offers a wide range of features and customization options, and there are thousands of themes and plugins available to enhance the appearance and functionality of your blog. WordPress is free to use, but you will need to pay for hosting and a domain name if you want to use your own.</p>
</li>
<li>
<p><a href="https://www.blogger.com/">Blogger</a> is a blogging platform owned by Google that is easy to set up and use. It is free to use and includes basic features and customization options. However, you may need to upgrade to a paid plan if you want to use your own domain name or access more advanced features.</p>
</li>
<li>
<p><a href="https://www.squarespace.com/">Squarespace</a> is a platform that offers a variety of templates and design tools for creating a professional-looking blog. It is easy to use and includes a range of features, but it can be more expensive than some other platforms.</p>
</li>
</ul>
<p>When choosing a blogging platform, it&rsquo;s important to consider your needs and budget. Think about the type of blog you want to create, the features you need, and the level of customization you want. Take the time to research and compare the different options before making a decision.</p>
<h2 id="2--selecting-a-domain-name">2. üåç Selecting a domain name</h2>
<p>After you&rsquo;ve chosen a blogging platform, the next step is to select a domain name for your blog. Your domain name is the web address that people will use to access your blog, so it&rsquo;s important to choose one that is memorable, easy to spell, and relevant to your blog&rsquo;s content.</p>
<p>Here are some tips for selecting a good domain name:</p>
<ul>
<li><strong>Keep it short and simple</strong>: A shorter domain name is easier to remember and type, so try to keep it as concise as possible. Avoid using hyphens or numbers, as these can be confusing and hard to remember.</li>
<li><strong>Make it relevant</strong>: Your domain name should reflect the content of your blog, so try to choose a name that is descriptive and relevant to your topic.</li>
<li><strong>Be creative</strong>: While it&rsquo;s important to choose a domain name that is relevant and easy to remember, don&rsquo;t be afraid to get creative and think outside the box.</li>
<li><strong>Check availability</strong>: Before you decide on a domain name, make sure it&rsquo;s available by checking with a domain name registrar. There are many registrars to choose from, such as Namecheap or GoDaddy.</li>
</ul>
<p>Choosing a good domain name is an important step in starting a blog, as it will be the first thing people see when they visit your site. Take the time to carefully consider your options and choose a name that reflects your blog and resonates with your audience.</p>
<h2 id="3--setting-up-hosting">3. üè† Setting up hosting</h2>
<p>Once you have chosen a blogging platform and selected a domain name, the next step is to set up hosting for your blog. Hosting is essentially a place on the internet where your blog will live. It is what allows people to access your blog from anywhere in the world.</p>
<p>There are several types of hosting to choose from, including shared, VPS (Virtual Private Server), and dedicated <a href="https://www.hostinger.com/tutorials/difference-between-shared-hosting-vps-and-dedicated-server">(shared hosting vs VPS vs dedicated server)</a>. Shared hosting is the most affordable option and is suitable for small blogs with low traffic. VPS hosting is more expensive, but offers more resources and greater control over your hosting environment. Dedicated hosting is the most expensive option, but is best for large blogs with high traffic or specialized needs.</p>
<p>When choosing a hosting provider, it&rsquo;s important to consider the needs of your blog, such as the type of platform you are using, the amount of traffic you expect to receive, and your budget. Some hosting providers offer plans specifically for popular blogging platforms, such as <a href="https://www.bluehost.com/wordpress">WordPress hosting</a>. It&rsquo;s a good idea to do some research and compare the different options before making a decision. Some popular hosting providers include <a href="https://www.bluehost.com/">Bluehost</a> and <a href="https://www.hostgator.com/">HostGator</a>.</p>
<p>Setting up hosting for your blog is an important step, as it will ensure that your blog is accessible to your audience. Choose a hosting provider that meets your needs and budget, and make sure to carefully follow the instructions for setting up your hosting account.</p>
<h2 id="4--designing-your-blog">4. üé® Designing your blog</h2>
<p>Once you have set up hosting for your blog, the next step is to design your blog using the tools and features provided by your blogging platform. The appearance and layout of your blog are important, as they create the first impression for your readers and set the tone for your content.</p>
<p>There are several ways you can customize the appearance of your blog:</p>
<p>Choose a theme: Most blogging platforms offer a variety of themes to choose from, which are pre-designed templates that you can use to give your blog a cohesive look and feel. Choose a theme that reflects your blog&rsquo;s content and style.</p>
<p>Add widgets and plugins: Widgets are small blocks of content that you can add to your blog&rsquo;s sidebar or footer. Plugins are add-ons that add functionality to your blog, such as contact forms or SEO tools.</p>
<p>Create pages and menus: Pages are static content that you can use to organize your blog and provide additional information about your blog or yourself. Menus allow you to create navigation links to your pages and other parts of your blog.</p>
<p>Designing your blog is an important step in creating a professional and user-friendly website. Take the time to explore the customization options available to you and choose a look and feel that reflects your blog&rsquo;s content and style.</p>
<h2 id="5--writing-and-publishing-content">5. üìù Writing and publishing content</h2>
<p>Once your blog is set up and designed, it&rsquo;s time to start writing and publishing content. This is the fun part! Whether you want to share your thoughts, ideas, or experiences, the content of your blog is what will attract and engage readers.</p>
<p>Here are some tips for writing and publishing content:</p>
<ul>
<li><strong>Develop a content strategy</strong>: Before you start writing, it&rsquo;s important to have a plan for your content. This might include topics you want to cover, the frequency of your posts, and the style and tone of your writing.</li>
<li><strong>Write engaging content</strong>: To keep your readers coming back for more, it&rsquo;s important to write content that is interesting, informative, and engaging. Use headings, subheadings, and bullet points to break up your text and make it easier to read.</li>
<li><strong>Be consistent</strong>: Consistency is key when it comes to blogging. Choose a posting schedule that works for you and stick to it. This will help you build a loyal readership and keep your blog fresh and up-to-date.</li>
</ul>
<p>Publishing your content is easy with most blogging platforms. Simply create a new post or page and use the editor to format and publish your content. Be sure to proofread your work and make any necessary edits before publishing to ensure that your content is of the highest quality.</p>
<p>Writing and publishing content is the heart of your blog. Take the time to create compelling and engaging content that reflects your voice and resonates with your audience.</p>
<h2 id="-key-take-away">üìç Key take-away</h2>
<p>Congratulations! You&rsquo;ve made it through all the steps of starting a blog. By choosing a platform, selecting a domain name, setting up hosting, designing your blog, and writing and publishing content, you&rsquo;ve created the foundation for a successful blog.</p>
<p>Starting a blog can be a fun and rewarding experience, but it does take time and effort. Don&rsquo;t get discouraged if you don&rsquo;t see immediate results. Building a readership takes time, and it&rsquo;s important to be consistent and patient.</p>
<p>If you&rsquo;re feeling stuck or unsure of where to go next, there are many resources available to help you on your blogging journey. Consider joining a community or forum for bloggers, such as ProBlogger or BlogHer, to connect with other bloggers and get advice and support. You can also check out online tutorials and resources for tips and best practices for building and growing your blog.</p>
<p>So, if you&rsquo;re ready to start sharing your voice with the world, don&rsquo;t be afraid to get started. Happy blogging!</p>
<hr>
<h2 id="-ressources">üìö Ressources</h2>
<p>If you&rsquo;re looking for more information or resources to help you on your blogging journey, here are some helpful links to get you started:</p>
<ul>
<li><a href="https://wordpress.org/">WordPress.org</a> - WordPress is a popular blogging platform that is free to use and offers a wide range of features and customization options.</li>
<li><a href="https://www.blogger.com/">Blogger</a> - Blogger is a blogging platform that is owned by Google and is easy to set up and use.</li>
<li><a href="https://www.squarespace.com/">Squarespace</a> - Squarespace is a platform that offers a variety of templates and design tools for creating a professional-looking blog.</li>
<li><a href="https://www.namecheap.com/">Namecheap</a> - Namecheap is a domain name registrar that allows you to purchase and register a domain name for your blog.</li>
<li><a href="https://www.bluehost.com/">Bluehost</a> - Bluehost is a hosting provider that offers plans specifically for WordPress users.</li>
</ul>
<p>In addition to these resources, you may also want to consider joining a community or forum for bloggers, such as ProBlogger or BlogHer, to connect with other bloggers and get advice and support. These communities can be a great source of inspiration, encouragement, and knowledge for bloggers at any stage of their journey.</p>
<hr>
<p>We hope this article has been helpful in guiding you through the process of starting a blog. With these steps and resources at your fingertips, you&rsquo;re well on your way to creating a successful and rewarding blog. Happy blogging!</p>
]]></content:encoded></item><item><title>Scala `case classes` explained</title><link>https://blog.yrieix.com/posts/scala-case-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.yrieix.com/posts/scala-case-class/</guid><description>Description of case classes in scala</description><content:encoded><![CDATA[<p>Scala is a powerful programming language that is well-suited for building large, complex software systems.
One of the features of Scala that makes it particularly well-suited for this task is its support for case classes.
In this article, we&rsquo;ll take a closer look at case classes and how they can be used to write clean, maintainable code.</p>
<p>At a high level, a <code>case class</code> is a special kind of class that is designed to be used in the context of pattern matching.
A <code>case class</code> is defined using the <code>case</code> keyword, which automatically generates several useful things for you:</p>
<ul>
<li>A primary constructor, which defines the fields of the <code>case class</code>
<code>equals</code> and <code>hashCode</code> methods that are based on value, not reference identity</li>
<li>A <code>toString</code> method that provides a useful string representation of the <code>case class</code> instance
copy method</li>
<li>An <code>apply</code> method, which allows you to create an instance of the <code>case class</code> without using the <code>new</code> keyword.</li>
<li>An <code>unapply</code> method, which allows the <code>case class</code> to be used in pattern matching.</li>
</ul>
<p>Here&rsquo;s an example of a <code>case class</code> definition:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span>x<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">,</span> y<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>With this definition, you can create instances of the <code>case class</code> like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> p1 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> p2 <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#ae81ff">3</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>You can also access the fields of a <code>case class</code> instance using the dot notation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> x <span style="color:#66d9ef">=</span> p1<span style="color:#f92672">.</span>x
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> y <span style="color:#66d9ef">=</span> p1<span style="color:#f92672">.</span>y
</span></span></code></pre></div><p>One of the most powerful features of case classes is that they can be used in pattern matching.
Here&rsquo;s an example of how you might use a <code>case class</code> in a pattern match:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> point <span style="color:#66d9ef">=</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>point <span style="color:#66d9ef">match</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">Point</span><span style="color:#f92672">(</span>x<span style="color:#f92672">,</span> y<span style="color:#f92672">)</span> <span style="color:#66d9ef">=&gt;</span> println<span style="color:#f92672">(</span><span style="color:#e6db74">s&#34;x = </span><span style="color:#e6db74">$x</span><span style="color:#e6db74">, y = </span><span style="color:#e6db74">$y</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">_</span> <span style="color:#66d9ef">=&gt;</span> println<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Not a Point&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The above pattern match will output &ldquo;x = 1, y = 2&rdquo;, because the point variable matches the pattern Point(x, y).</p>
<p>Another feature of <code>case class</code> is <code>copy</code> method which is used to create a new instance of <code>case class</code> with some modifications to the original instance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scala" data-lang="scala"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> p2 <span style="color:#66d9ef">=</span> p1<span style="color:#f92672">.</span>copy<span style="color:#f92672">(</span>x <span style="color:#66d9ef">=</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>p2 will be a new instance of Point class with value x = 3 and y = 2</p>
<p>In summary, case classes are an incredibly powerful feature of Scala that makes it easy to write code that is both clean and maintainable.
With case classes, you can define simple classes that have a useful <code>toString</code> representation,
and you can use them in pattern matching to write expressive, powerful code.</p>
<p>As you continue to work with Scala, case classes will become an essential tool in your toolbox, so it is a good idea to get familiar with them early on.</p>
<hr>
<h3 id="comparison-case-class-vs-case-object">Comparison <code>case class</code> vs <code>case object</code></h3>
<p>The main differences between <code>case class</code> and <code>case object</code> are:</p>
<ul>
<li>
<ol>
<li><code>case class</code> has constructor parameters and <code>case object</code> doesn&rsquo;t have.</li>
</ol>
</li>
<li>
<ol start="2">
<li><code>case class</code> creates instances while <code>case object</code> creates singleton instances</li>
</ol>
</li>
<li>
<ol start="3">
<li><code>case class</code> instances are compared by value while <code>case objects</code> are compared by reference.</li>
</ol>
</li>
</ul>
<p>Both are used in pattern matching but <code>case class</code> instances are used more frequently in pattern matching.</p>
<p>üëâ You should use <code>case class</code> if you want to define a class with data, and you should use <code>case object</code> if you want to define a singleton object with no data.</p>
]]></content:encoded></item></channel></rss>